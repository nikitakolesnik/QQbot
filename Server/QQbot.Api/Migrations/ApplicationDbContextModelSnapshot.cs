// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QQbot.DataAccessLayer.Contexts;

namespace QQbot.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QQbot.DataAccessLayer.Entities.LobbyPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Joined")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("TeamNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Lobby");
                });

            modelBuilder.Entity("QQbot.DataAccessLayer.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionedById")
                        .HasColumnType("int");

                    b.Property<int?>("LosingTeamId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WinningTeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionedById");

                    b.HasIndex("LosingTeamId");

                    b.HasIndex("WinningTeamId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("QQbot.DataAccessLayer.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionedById")
                        .HasColumnType("int");

                    b.Property<long>("Discord")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionedById");

                    b.HasIndex("Discord")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionDate = new DateTime(2020, 3, 25, 23, 10, 37, 482, DateTimeKind.Local).AddTicks(1955),
                            ActionedById = 1,
                            Discord = 240413827718578177L,
                            Name = "Slam",
                            Rating = 1000,
                            Status = 2
                        },
                        new
                        {
                            Id = 2,
                            ActionDate = new DateTime(2020, 3, 25, 23, 10, 37, 485, DateTimeKind.Local).AddTicks(1062),
                            ActionedById = 1,
                            Discord = 175325337196953600L,
                            Name = "Yoko",
                            Rating = 1000,
                            Status = 2
                        },
                        new
                        {
                            Id = 3,
                            ActionDate = new DateTime(2020, 3, 25, 23, 10, 37, 485, DateTimeKind.Local).AddTicks(1109),
                            ActionedById = 1,
                            Discord = 287275232236929026L,
                            Name = "Candy",
                            Rating = 1000,
                            Status = 2
                        },
                        new
                        {
                            Id = 4,
                            ActionDate = new DateTime(2020, 3, 25, 23, 10, 37, 485, DateTimeKind.Local).AddTicks(1115),
                            ActionedById = 1,
                            Discord = 232147476008796161L,
                            Name = "Godly",
                            Rating = 1000,
                            Status = 2
                        },
                        new
                        {
                            Id = 5,
                            ActionDate = new DateTime(2020, 3, 25, 23, 10, 37, 485, DateTimeKind.Local).AddTicks(1118),
                            ActionedById = 1,
                            Discord = 416266623847235584L,
                            Name = "Santana",
                            Rating = 1000,
                            Status = 2
                        },
                        new
                        {
                            Id = 6,
                            ActionDate = new DateTime(2020, 3, 25, 23, 10, 37, 485, DateTimeKind.Local).AddTicks(1122),
                            ActionedById = 1,
                            Discord = 208987498368598016L,
                            Name = "Purif",
                            Rating = 1000,
                            Status = 2
                        },
                        new
                        {
                            Id = 7,
                            ActionDate = new DateTime(2020, 3, 25, 23, 10, 37, 485, DateTimeKind.Local).AddTicks(1125),
                            ActionedById = 1,
                            Discord = 361620009815900170L,
                            Name = "Chrona",
                            Rating = 1000,
                            Status = 2
                        },
                        new
                        {
                            Id = 8,
                            ActionDate = new DateTime(2020, 3, 25, 23, 10, 37, 485, DateTimeKind.Local).AddTicks(1128),
                            ActionedById = 1,
                            Discord = 382998762533945344L,
                            Name = "Lisek",
                            Rating = 1000,
                            Status = 2
                        },
                        new
                        {
                            Id = 9,
                            ActionDate = new DateTime(2020, 3, 25, 23, 10, 37, 485, DateTimeKind.Local).AddTicks(1132),
                            ActionedById = 1,
                            Discord = 277194459576532992L,
                            Name = "Oln",
                            Rating = 1000,
                            Status = 2
                        },
                        new
                        {
                            Id = 10,
                            ActionDate = new DateTime(2020, 3, 25, 23, 10, 37, 485, DateTimeKind.Local).AddTicks(1135),
                            ActionedById = 1,
                            Discord = 288009866080157697L,
                            Name = "Rainy",
                            Rating = 1000,
                            Status = 2
                        },
                        new
                        {
                            Id = 11,
                            ActionDate = new DateTime(2020, 3, 25, 23, 10, 37, 485, DateTimeKind.Local).AddTicks(1139),
                            ActionedById = 1,
                            Discord = 465126942656561152L,
                            Name = "Butters",
                            Rating = 1000,
                            Status = 2
                        },
                        new
                        {
                            Id = 12,
                            ActionDate = new DateTime(2020, 3, 25, 23, 10, 37, 485, DateTimeKind.Local).AddTicks(1142),
                            ActionedById = 1,
                            Discord = 241149128216674305L,
                            Name = "Takida",
                            Rating = 1000,
                            Status = 2
                        },
                        new
                        {
                            Id = 13,
                            ActionDate = new DateTime(2020, 3, 25, 23, 10, 37, 485, DateTimeKind.Local).AddTicks(1145),
                            ActionedById = 1,
                            Discord = 99492885015048192L,
                            Name = "Jo",
                            Rating = 1000,
                            Status = 2
                        },
                        new
                        {
                            Id = 14,
                            ActionDate = new DateTime(2020, 3, 25, 23, 10, 37, 485, DateTimeKind.Local).AddTicks(1149),
                            ActionedById = 1,
                            Discord = 221445321530540032L,
                            Name = "Bounty",
                            Rating = 1000,
                            Status = 2
                        },
                        new
                        {
                            Id = 15,
                            ActionDate = new DateTime(2020, 3, 25, 23, 10, 37, 485, DateTimeKind.Local).AddTicks(1152),
                            ActionedById = 1,
                            Discord = 430796233783640066L,
                            Name = "Cracks",
                            Rating = 1000,
                            Status = 2
                        },
                        new
                        {
                            Id = 16,
                            ActionDate = new DateTime(2020, 3, 25, 23, 10, 37, 485, DateTimeKind.Local).AddTicks(1155),
                            ActionedById = 1,
                            Discord = 242126086983516160L,
                            Name = "Jonas",
                            Rating = 1000,
                            Status = 2
                        });
                });

            modelBuilder.Entity("QQbot.DataAccessLayer.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("QQbot.DataAccessLayer.Entities.TeamPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamPlayers");
                });

            modelBuilder.Entity("QQbot.DataAccessLayer.Entities.LobbyPlayer", b =>
                {
                    b.HasOne("QQbot.DataAccessLayer.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QQbot.DataAccessLayer.Entities.Match", b =>
                {
                    b.HasOne("QQbot.DataAccessLayer.Entities.Player", "ActionedBy")
                        .WithMany()
                        .HasForeignKey("ActionedById");

                    b.HasOne("QQbot.DataAccessLayer.Entities.Team", "LosingTeam")
                        .WithMany()
                        .HasForeignKey("LosingTeamId");

                    b.HasOne("QQbot.DataAccessLayer.Entities.Team", "WinningTeam")
                        .WithMany()
                        .HasForeignKey("WinningTeamId");
                });

            modelBuilder.Entity("QQbot.DataAccessLayer.Entities.Player", b =>
                {
                    b.HasOne("QQbot.DataAccessLayer.Entities.Player", "ActionedBy")
                        .WithMany()
                        .HasForeignKey("ActionedById");
                });

            modelBuilder.Entity("QQbot.DataAccessLayer.Entities.TeamPlayer", b =>
                {
                    b.HasOne("QQbot.DataAccessLayer.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QQbot.DataAccessLayer.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");
                });
#pragma warning restore 612, 618
        }
    }
}
